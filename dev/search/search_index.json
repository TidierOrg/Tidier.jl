{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tidierjl","title":"Tidier.jl","text":""},{"location":"#what-is-tidierjl","title":"What is Tidier.jl?","text":"<p><code>Tidier.jl</code> is a 100% Julia implementation of the R tidyverse mini-language in Julia. Powered by the <code>DataFrames.jl</code> package and Julia\u2019s extensive meta-programming capabilities, <code>Tidier.jl</code> is an R user\u2019s love letter to data analysis in Julia.</p> <p><code>Tidier.jl</code> has two goals, which differentiate it from other data analysis meta-packages:</p> <ol> <li>Stick as closely to tidyverse syntax as possible: Whereas other  meta-packages introduce Julia-centric idioms for working with  DataFrames, this package\u2019s goal is to reimplement parts of tidyverse  in Julia.</li> <li>Make broadcasting mostly invisible: Broadcasting trips up many R  users switching to Julia because R users are used to most functions  being vectorized. Tidier.jl currently uses a lookup table to decide  which functions not to vectorize; all other functions are  automatically vectorized.</li> </ol> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>In the Julia REPL type:</p> <pre><code>using Pkg\nPkg.add(url=\"https://github.com/kdpsingh/Tidier.jl\")\n</code></pre> <p>or</p> <pre><code>] add https://github.com/kdpsingh/Tidier.jl\n</code></pre> <p>The <code>]</code> character starts the Julia package manager. Hit backspace key to return to Julia prompt.</p> <p></p> <p></p>"},{"location":"#what-functions-does-tidierjl-support","title":"What functions does Tidier.jl support?","text":"<p>To support R-style programming, Tidier.jl is implemented using macros.</p> <p>Tidier.jl currently supports the following macros and functions:</p> <ul> <li><code>@select()</code></li> <li><code>@transmute()</code> (which is just an alias for <code>@select()</code> because they share the backend implementation in DataFrames.jl)</li> <li><code>@rename()</code></li> <li><code>@mutate()</code></li> <li><code>@summarize()</code> and <code>@summarise()</code></li> <li><code>@filter()</code></li> <li><code>@group_by()</code></li> <li><code>@slice()</code></li> <li><code>@arrange()</code></li> <li><code>across()</code></li> </ul> <p></p> <p></p>"},{"location":"#whats-missing","title":"What\u2019s missing?","text":"<ul> <li>Selection helpers like <code>startswith()</code> are not supported yet</li> <li>Joins are not yet supported</li> <li>Pivoting is not yet implemented</li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#index","title":"Index","text":"<ul> <li><code>Tidier.across</code></li> <li><code>Tidier.desc</code></li> <li><code>Tidier.@arrange</code></li> <li><code>Tidier.@filter</code></li> <li><code>Tidier.@group_by</code></li> <li><code>Tidier.@mutate</code></li> <li><code>Tidier.@rename</code></li> <li><code>Tidier.@select</code></li> <li><code>Tidier.@slice</code></li> <li><code>Tidier.@summarise</code></li> <li><code>Tidier.@summarize</code></li> <li><code>Tidier.@transmute</code></li> </ul>"},{"location":"reference/#reference-exported-functions","title":"Reference - Exported functions","text":"<p># <code>Tidier.across</code> \u2014 Method.</p> <pre><code>across(variable[s], function[s])\n</code></pre> <p>Apply functions to multiple variables. If specifiying multiple variables or functions, surround them with a parentheses so that they are recognized as a tuple.</p> <p>This function should only be called inside of <code>@mutate()</code>, <code>@summarize</code>, or <code>@summarise</code>.</p> <p>Arguments</p> <ul> <li><code>variable[s]</code>: An unquoted variable, or if multiple, an unquoted tuple of variables.</li> <li><code>function[s]</code>: A function, or if multiple, a tuple of functions.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @summarize(across(b, minimum))\n  end\n\njulia&gt; @chain df begin\n  @summarize(across((b,c), (minimum, maximum)))\n  end\n\njulia&gt; @chain df begin\n  @mutate(across((b,c), (minimum, maximum)))\n  end\n\njulia&gt; @chain df begin\n  @mutate(across((b, startswith(\"c\")), (minimum, maximum)))\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.desc</code> \u2014 Method.</p> <pre><code>desc(col)\n</code></pre> <p>Orders the rows of a DataFrame column in descending order when used inside of <code>@arrange()</code>. This function should only be called inside of `@arrange()``.</p> <p>Arguments</p> <ul> <li><code>col</code>: An unquoted column name.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e', inner = 2), b = 1:10, c = 11:20)\n\njulia&gt; @chain df begin\n  @arrange(a, desc(b))\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@arrange</code> \u2014 Macro.</p> <pre><code>@arrange(df, exprs...)\n</code></pre> <p>Orders the rows of a DataFrame by the values of specified columns.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: Variables from the input DataFrame. Use <code>desc()</code> to sort in descending order. Multiple variables can be specified, separated by commas.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e', inner = 2), b = 1:10, c = 11:20)\n\njulia&gt; @chain df begin\n    @arrange(a)\n    end\n\njulia&gt; @chain df begin\n  @arrange(a, desc(b))\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@filter</code> \u2014 Macro.</p> <pre><code>@filter(df, exprs...)\n</code></pre> <p>Subset a DataFrame and return a copy of DataFrame where specified conditions are satisfied.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: transformation(s) that produce vectors containing <code>true</code> or <code>false</code>.</li> </ul> <p>Examples</p> <pre><code>  julia&gt; using DataFrames\n\n  julia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\n  julia&gt; @chain df begin\n    @filter(b &gt;= mean(b))\n    end\n</code></pre> <p>source</p> <p># <code>Tidier.@group_by</code> \u2014 Macro.</p> <pre><code>@group_by(df, exprs...)\n</code></pre> <p>Return a <code>GroupedDataFrame</code> where operations are performed by groups specified by unique  sets of <code>cols</code>.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: DataFrame columns to group by or tidy expressions. Can be a single tidy expression or multiple expressions separated by commas.</li> </ul> <p>Examples</p> <pre><code>  julia&gt; using DataFrames\n\n  julia&gt; df = DataFrame(a = repeat('a':'e', inner = 2), b = 1:10, c = 11:20)\n\n  julia&gt; @chain df begin\n    @group_by(a)\n    @summarize(b = mean(b))\n    end\n\n  julia&gt; @chain df begin\n    @group_by(d = uppercase(a))\n    @summarize(b = mean(b))\n    end\n</code></pre> <p>source</p> <p># <code>Tidier.@mutate</code> \u2014 Macro.</p> <pre><code>@mutate(df, exprs...)\n</code></pre> <p>Create new columns as functions of existing columns. The results have the same number of rows as <code>df</code>.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: add new columns or replace values of existed columns using        <code>new_variable = values</code> syntax.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @mutate(d = b + c, b_minus_mean_b = b - mean(b))\n  end\n\njulia&gt; @chain df begin\n  @mutate(across((b, c), mean))\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@rename</code> \u2014 Macro.</p> <pre><code>@rename(df, exprs...)\n</code></pre> <p>Change the names of individual column names in a DataFrame. Users can also use <code>@select()</code> to rename and select columns.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: Use <code>new_name = old_name</code> syntax to rename selected columns.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @rename(d = b, e = c)\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@select</code> \u2014 Macro.</p> <pre><code>@select(df, exprs...)\n</code></pre> <p>Select variables in a DataFrame.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: One or more unquoted variable names separated by commas. Variable names         can also be used as their positions in the data, like <code>x:y</code>, to select         a range of variables.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @select(a,b,c)\n  end\n\njulia&gt; @chain df begin\n  @select(a:b)\n  end\n\njulia&gt; @chain df begin\n  @select(1:2)\n  end\n\njulia&gt; @chain df begin\n  @select(-(a:b))\n  end\n\njulia&gt; @chain df begin\n  @select(contains(\"b\"), startswith(\"c\"))\n  end\n\njulia&gt; @chain df begin\n  @select(-(1:2))\n  end\n\njulia&gt; @chain df begin\n  @select(-c)\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@slice</code> \u2014 Macro.</p> <pre><code>@slice(df, exprs...)\n</code></pre> <p>Select, remove or duplicate rows by indexing their integer positions.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: integer row values. Use positive values to keep the rows, or negative values to drop. Values provided must be either all positive or all negative, and they must be within the range of DataFrames' row numbers.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e', inner = 2), b = 1:10, c = 11:20)\n\njulia&gt; @chain df begin\n    @slice(1:5)\n    end\n\njulia&gt; @chain df begin\n  @slice(-(1:5))\n  end\n\njulia&gt; @chain df begin\n  @group_by(a)\n  @slice(1)\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@summarise</code> \u2014 Macro.</p> <pre><code>@summarize(df, exprs...)\n@summarise(df, exprs...)\n</code></pre> <p>Create a new DataFrame with one row that aggregating all observations from the input DataFrame or GroupedDataFrame. </p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: a <code>new_variable = function(old_variable)</code> pair. <code>function()</code> should be an aggregate function that returns a single value.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @summarise(mean_b = mean(b), median_b = median(b))\n  end\n\njulia&gt; @chain df begin\n  @summarise(across((b,c), (minimum, maximum)))\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@summarize</code> \u2014 Macro.</p> <pre><code>@summarize(df, exprs...)\n@summarise(df, exprs...)\n</code></pre> <p>Create a new DataFrame with one row that aggregating all observations from the input DataFrame or GroupedDataFrame. </p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: a <code>new_variable = function(old_variable)</code> pair. <code>function()</code> should be an aggregate function that returns a single value.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @summarize(mean_b = mean(b), median_b = median(b))\n  end\n\njulia&gt; @chain df begin\n  @summarize(across((b,c), (minimum, maximum)))\n  end\n</code></pre> <p>source</p> <p># <code>Tidier.@transmute</code> \u2014 Macro.</p> <pre><code>@transmute(df, exprs...)\n</code></pre> <p>Create a new DataFrame with only computed columns.</p> <p>Arguments</p> <ul> <li><code>df</code>: A DataFrame.</li> <li><code>exprs...</code>: add new columns or replace values of existed columns using        <code>new_variable = values</code> syntax.</li> </ul> <p>Examples</p> <pre><code>julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = repeat('a':'e'), b = 1:5, c = 11:15)\n\njulia&gt; @chain df begin\n  @transmute(d = b + c)\n  end\n</code></pre> <p>source</p> <p></p> <p></p>"},{"location":"reference/#reference-internal-functions","title":"Reference - Internal functions","text":""},{"location":"examples/generated/Contributors/Howto/","title":"Contribute to Documentation","text":""},{"location":"examples/generated/Contributors/Howto/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>Info</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropriate level.</p> <p>Info</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p></p> <p></p>"},{"location":"examples/generated/Contributors/Howto/#build-docs-locally","title":"Build docs locally","text":"<p>If you want to take a look at the docs locally before doing a PR follow the next steps:</p> <p>build docs locally</p> <p>Install the following dependecies in your system via pip, i.e.</p> <ul> <li><code>pip install mkdocs pygments python-markdown-math</code></li> <li><code>pip install mkdocs-material pymdown-extensions mkdocstrings</code></li> <li><code>pip mknotebooks pytkdocs_tweaks mkdocs_include_exclude_files jinja2 mkdocs-video</code></li> </ul> <p>Then simply go to your <code>docs</code> env and activate it, i.e.</p> <p><code>docs&gt; julia</code></p> <p><code>julia&gt; ]</code></p> <p><code>(docs) pkg&gt; activate .</code></p> <p>Next, run the scripts:</p> <p>Info</p> <p>Generate files and build docs by running:</p> <ul> <li><code>genfiles.jl</code></li> <li><code>make.jl</code></li> </ul> <p>Now go to your <code>terminal</code> in the same path <code>docs&gt;</code> and run:</p> <p><code>mkdocs serve</code></p> <p>This should ouput <code>http://127.0.0.1:8000</code>, copy/paste this into your browser and you are all set.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/across/","title":"across","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre> <p><code>across()</code> can be used with either <code>@mutate</code> or <code>@summarize</code> to operate on multiple columns and/or multiple functions.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/across/#one-variable-one-function","title":"One variable, one function","text":"<pre><code>@chain movies begin\n@mutate(Budget = Budget / 1_000_000)\n@summarize(across(Budget, mean\u2218skipmissing))\nend\n</code></pre> 1\u00d71 DataFrame RowBudget_mean_skipmissingFloat64113.4125"},{"location":"examples/generated/UserGuide/across/#one-variable-one-anonymous-function","title":"One variable, one anonymous function","text":"<pre><code>@chain movies begin\n@mutate(Budget = Budget / 1_000_000)\n@summarize(across(Budget, (x -&gt; mean(skipmissing(x)))))\nend\n</code></pre> 1\u00d71 DataFrame RowBudget_functionFloat64113.4125"},{"location":"examples/generated/UserGuide/across/#multiple-variables-multiple-functions","title":"Multiple variables, multiple functions","text":"<pre><code>@chain movies begin\n@mutate(Budget = Budget / 1_000_000)\n@summarize(across((Rating, Budget), (mean\u2218skipmissing, median\u2218skipmissing)))\nend\n</code></pre> 1\u00d74 DataFrame RowRating_mean_skipmissingBudget_mean_skipmissingRating_median_skipmissingBudget_median_skipmissingFloat64Float64Float64Float6415.9328513.41256.13.0"},{"location":"examples/generated/UserGuide/across/#multiple-selection-helpers-multiple-functions","title":"Multiple selection helpers, multiple functions","text":"<pre><code>@chain movies begin\n@mutate(Budget = Budget / 1_000_000)\n@summarize(across((starts_with(\"Bud\"), ends_with(\"ting\")), (mean\u2218skipmissing, median\u2218skipmissing)))\nend\n</code></pre> 1\u00d74 DataFrame RowBudget_mean_skipmissingRating_mean_skipmissingBudget_median_skipmissingRating_median_skipmissingFloat64Float64Float64Float64113.41255.932853.06.1 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/arrange/","title":"@arrange","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre>"},{"location":"examples/generated/UserGuide/arrange/#sort-both-in-ascending-order","title":"Sort both in ascending order","text":"<pre><code>@chain movies begin\n@arrange(Year, Rating)\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641Blacksmith Scene18931missing7.02Hadj Cheriff18941missing4.13Glenroy Bros., No. 218941missing4.24Leonard-Cushing Fight18941missing4.45Sioux Ghost Dance18941missing4.4"},{"location":"examples/generated/UserGuide/arrange/#sort-in-a-mix-of-ascending-and-descending-order","title":"Sort in a mix of ascending and descending order","text":""},{"location":"examples/generated/UserGuide/arrange/#desc","title":"<code>desc</code>","text":"<pre><code>@chain movies begin\n@arrange(Year, desc(Rating))\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641Blacksmith Scene18931missing7.02Luis Martinetti, Contortionist18941missing6.13Caicedo (with Pole)18941missing5.84Glenroy Brothers (Comic Boxing)18941missing5.45Buffalo Dance18941missing5.0 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/autovec/","title":"Auto-vectorization","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\ndf = DataFrame(a = repeat('a':'e', inner = 2), b = [1,1,1,2,2,2,3,3,3,4], c = 11:20)\n</code></pre> 10\u00d73 DataFrame RowabcCharInt64Int641a1112a1123b1134b2145c2156c2167d3178d3189e31910e420 <p>By default, Tidier.jl uses a lookup table to decide which functions not to vectorize. For example, <code>mean()</code> is listed as a function that should never be vectorized. Also, any function used inside of <code>@summarize()</code> is also never automatically vectorized. Any function that is not included in this list and is used in a context other than <code>@summarize()</code> is automatically vectorized.</p> <p>This \"auto-vectorization\" makes working with Tidier.jl more R-like and convenient. However, if you ever define your own function and try to use it, Tidier.jl may unintentionally vectorize it for you. To prevent auto-vectorization, you can prefix your function with a <code>~</code>. For example, let's define a function <code>new_mean()</code> that calculates a mean.</p> <pre><code>new_mean(exprs...) = mean(exprs...)\n</code></pre> <pre><code>new_mean (generic function with 1 method)\n</code></pre> <p>If we try to use <code>new_mean()</code> inside of <code>@mutate()</code>, it will give us the wrong result. This is because <code>new_mean()</code> is vectorized, which results in the mean being calculated element-wise, which is almost never what we actually want.</p> <pre><code>@chain df begin\n@mutate(d = c - new_mean(c))\nend\n</code></pre> 10\u00d74 DataFrame RowabcdCharInt64Int64Float641a1110.02a1120.03b1130.04b2140.05c2150.06c2160.07d3170.08d3180.09e3190.010e4200.0 <p>To prevent <code>new_mean()</code> from being vectorized, we need to prefix it with a <code>~</code> like this:</p> <pre><code>@chain df begin\n@mutate(d = c - ~new_mean(c))\nend\n</code></pre> 10\u00d74 DataFrame RowabcdCharInt64Int64Float641a111-4.52a112-3.53b113-2.54b214-1.55c215-0.56c2160.57d3171.58d3182.59e3193.510e4204.5 <p>This gives us the correct answer. Notice that adding a <code>~</code> is not needed with <code>mean()</code> because <code>mean()</code> is already included on our look-up table of functions not requiring vectorization.</p> <pre><code>@chain df begin\n@mutate(d = c - mean(c))\nend\n</code></pre> 10\u00d74 DataFrame RowabcdCharInt64Int64Float641a111-4.52a112-3.53b113-2.54b214-1.55c215-0.56c2160.57d3171.58d3182.59e3193.510e4204.5 <p>If you're not sure if a function is vectorized and want to prevent it from being vectorized, you can always prefix it with a ~ to prevent vectorization. Even though <code>mean()</code> is not vectorized anyway, prefixing it with a ~ will not cause any harm.</p> <pre><code>@chain df begin\n@mutate(d = c - ~mean(c))\nend\n</code></pre> 10\u00d74 DataFrame RowabcdCharInt64Int64Float641a111-4.52a112-3.53b113-2.54b214-1.55c215-0.56c2160.57d3171.58d3182.59e3193.510e4204.5 <p>If for some crazy reason, you did want to vectorize <code>mean()</code>, you are always allowed to vectorize it, and Tidier.jl won't un-vectorize it.</p> <pre><code>@chain df begin\n@mutate(d = c - mean.(c))\nend\n</code></pre> 10\u00d74 DataFrame RowabcdCharInt64Int64Float641a1110.02a1120.03b1130.04b2140.05c2150.06c2160.07d3170.08d3180.09e3190.010e4200.0 <p>Note: <code>~</code> also works with operators, so if you want to not vectorize an operator, you can prefix it with <code>~</code>, for example, <code>a ~* b</code> will perform a matrix multiplication rather than element-wise multiplication. Remember that this is only needed outside of <code>@summarize()</code> because <code>@summarize()</code> never performs auto-vectorization.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/dataset_movies/","title":"Movies dataset","text":"<p>In order to show how the functions defined by Tidier.jl work, we will use the datasets in  <code>RDatasets.jl</code>, using the the movies dataset.</p> <pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\")\nfirst(movies, 5)\n</code></pre> 5\u00d724 DataFrame RowTitleYearLengthBudgetRatingVotesR1R2R3R4R5R6R7R8R9R10MPAAActionAnimationComedyDramaDocumentaryRomanceShortStringInt32Int32Int32?Float64Int32Float64Float64Float64Float64Float64Float64Float64Float64Float64Float64Cat\u2026Int32Int32Int32Int32Int32Int32Int321$1971121missing6.43484.54.54.54.514.524.524.514.54.54.500110002$1000 a Touchdown193971missing6.0200.014.54.524.514.514.514.54.54.514.500100003$21 a Day Once a Month19417missing8.250.00.00.00.00.024.50.044.524.524.501000014$40,000199670missing8.2614.50.00.00.00.00.00.00.034.545.500100005$50,000 Climax Show, The197571missing3.41724.54.50.014.514.54.50.00.00.024.50000000 <p></p> <p></p>"},{"location":"examples/generated/UserGuide/dataset_movies/#describe","title":"<code>describe</code>","text":"<p>Describing the dataset.</p> <pre><code>describe(movies)\n</code></pre> 24\u00d77 DataFrame RowvariablemeanminmedianmaxnmissingeltypeSymbolUnion\u2026AnyUnion\u2026AnyInt64Type1Title$xXx: State of the Union0String2Year1976.1318931983.020050Int323Length82.3379190.052200Int324Budget1.34125e703.0e620000000053573Union{Missing, Int32}5Rating5.932851.06.110.00Float646Votes632.13530.01576080Int327R17.014380.04.5100.00Float648R24.022380.04.584.50Float649R34.721160.04.584.50Float6410R46.374850.04.5100.00Float6411R59.796690.04.5100.00Float6412R613.03920.014.584.50Float6413R715.54810.014.5100.00Float6414R813.8760.014.5100.00Float6415R98.954210.04.5100.00Float6416R1016.8540.014.5100.00Float6417MPAAR0CategoricalValue{String, UInt8}18Action0.079744200.010Int3219Animation0.062767900.010Int3220Comedy0.29378400.010Int3221Drama0.37101100.010Int3222Documentary0.059059700.010Int3223Romance0.080696700.010Int3224Short0.16088300.010Int32 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/filter/","title":"@filter","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre> <p>Let\u2019s take a look at the movies whose budget was more than average.</p> <pre><code>@chain movies begin\n@mutate(Budget = Budget / 1_000_000)\n@filter(Budget &gt;= mean(skipmissing(Budget)))\n@select(Title, Budget)\n@slice(1:5)\nend\n</code></pre> 5\u00d72 DataFrame RowTitleBudgetStringFloat64?1'Til There Was You23.0210 Things I Hate About You16.03102 Dalmatians85.0413 Going On 3037.0513th Warrior, The85.0 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/group_by/","title":"@group_by","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre>"},{"location":"examples/generated/UserGuide/group_by/#combining-group_by-with-mutate","title":"Combining <code>@group_by()</code> with <code>@mutate()</code>","text":"<pre><code>@chain movies begin\n@group_by(Year)\n@mutate(Mean_Yearly_Rating = mean(skipmissing(Rating)))\n@select(Year, Rating, Mean_Yearly_Rating)\n@slice(1:5)\nend\n</code></pre> 5\u00d73 DataFrame RowYearRatingMean_Yearly_RatingInt32Float64Float64119716.45.66517219396.06.35041319418.26.34107419968.25.74712519753.45.62908"},{"location":"examples/generated/UserGuide/group_by/#combining-group_by-with-summarize","title":"Combining @group_by() with @summarize()","text":"<pre><code>@chain movies begin\n@group_by(Year)\n@summarize(Mean_Yearly_Rating = mean(skipmissing(Rating)),\nMedian_Yearly_Rating = median(skipmissing(Rating)))\n@slice(1:5)\nend\n</code></pre> 5\u00d73 DataFrame RowYearMean_Yearly_RatingMedian_Yearly_RatingInt32Float64Float64118937.07.0218944.888894.6318955.55.7418965.269235.3518974.677784.6 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/interpolation/","title":"Interpolation","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\ndf = DataFrame(a = repeat('a':'e', inner = 2), b = [1,1,1,2,2,2,3,3,3,4], c = 11:20)\n</code></pre> 10\u00d73 DataFrame RowabcCharInt64Int641a1112a1123b1134b2145c2156c2167d3178d3189e31910e420 <p>The <code>!!</code> (\"bang bang\") operator can be used to interpolate values of variables from the global environment into your code.</p> <p>Since the <code>!!</code> operator can only access variables in the global environment, we will set these variables in a somewhat roundabout way for the purposes of documentation. However, in interactive use, you can simply write <code>myvar = :b</code> instead of wrapping it inside of an <code>@eval()</code> macro.</p> <pre><code>@eval(Main, myvar = :b)\n@eval(Main, myvar_string = \"b\")\n@eval(Main, myvars_tuple = (:a, :b))\n@eval(Main, myvars_vector = [:a, :b])\n@eval(Main, myvars_string = (\"a\", \"b\"))\n</code></pre> <pre><code>(\"a\", \"b\")\n</code></pre> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/interpolation/#select-one-variable","title":"Select one variable","text":"<pre><code>@chain df begin\n@select(!!myvar)\nend\n\n@chain df begin\n@select(!!myvar_string)\nend\n</code></pre> 10\u00d71 DataFrame RowbInt64112131425262738393104"},{"location":"examples/generated/UserGuide/interpolation/#select-multiple-variables","title":"Select multiple variables","text":"<pre><code>@chain df begin\n@select(!!myvars_tuple)\nend\n\n@chain df begin\n@select(!!myvars_vector)\nend\n\n@chain df begin\n@select(!!myvars_string)\nend\n</code></pre> 10\u00d72 DataFrame RowabCharInt641a12a13b14b25c26c27d38d39e310e4"},{"location":"examples/generated/UserGuide/interpolation/#mutate-one-variable","title":"Mutate one variable","text":"<pre><code>@chain df begin\n@mutate(!!myvar = !!myvar + 1)\nend\n</code></pre> 10\u00d73 DataFrame RowabcCharInt64Int641a2112a2123b2134b3145c3156c3167d4178d4189e41910e520"},{"location":"examples/generated/UserGuide/interpolation/#summarize-across-one-variable","title":"Summarize across one variable","text":"<pre><code>@chain df begin\n@summarize(across(!!myvar, mean))\nend\n</code></pre> 1\u00d71 DataFrame Rowb_meanFloat6412.2"},{"location":"examples/generated/UserGuide/interpolation/#summarize-across-multiple-variables","title":"Summarize across multiple variables","text":"<pre><code>@eval(Main, myvars_tuple = (:b, :c))\n\n@chain df begin\n@summarize(across(!!myvars_tuple, (mean, minimum, maximum)))\nend\n</code></pre> 1\u00d76 DataFrame Rowb_meanc_meanb_minimumc_minimumb_maximumc_maximumFloat64Float64Int64Int64Int64Int6412.215.5111420"},{"location":"examples/generated/UserGuide/interpolation/#group-by-multiple-interpolated-variables","title":"Group by multiple interpolated variables","text":"<pre><code>@eval(Main, myvars_tuple = (:a, :b))\n\n@chain df begin\n@group_by(!!myvars_tuple)\n@summarize(c = mean(c))\nend\n</code></pre> 7\u00d73 DataFrame RowabcCharInt64Float641a111.52b113.03b214.04c215.55d317.56e319.07e420.0 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/mutate_transmute/","title":"@mutate & @transmute","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre>"},{"location":"examples/generated/UserGuide/mutate_transmute/#update-an-existing-column","title":"Update an existing column","text":""},{"location":"examples/generated/UserGuide/mutate_transmute/#mutate","title":"@mutate","text":"<p>We will scale the Budget down to millions of dollars. Since there are many missing values for Budget, we will first remove the missing values.</p> <pre><code>@chain movies begin\n@filter(!ismissing(Budget))\n@mutate(Budget = Budget/1_000_000)\n@select(Title, Budget)\n@slice(1:5)\nend\n</code></pre> 5\u00d72 DataFrame RowTitleBudgetStringFloat641'G' Men0.452'Manos' the Hands of Fate0.0193'Til There Was You23.04.com for Murder5.0510 Things I Hate About You16.0 <p></p> <p></p>"},{"location":"examples/generated/UserGuide/mutate_transmute/#transmute","title":"@transmute()","text":"<p>If we knew we wanted to select only the <code>Title</code> and <code>Budget</code> columns, we could have also used the <code>@transmute()</code> macro, which is just an alias for <code>@select()</code> since the two macros both use the <code>select()</code> function from <code>DataFrames.jl</code>.</p> <pre><code>@chain movies begin\n@filter(!ismissing(Budget))\n@transmute(Title = Title, Budget = Budget/1_000_000)\n@slice(1:5)\nend\n</code></pre> 5\u00d72 DataFrame RowTitleBudgetStringFloat641'G' Men0.452'Manos' the Hands of Fate0.0193'Til There Was You23.04.com for Murder5.0510 Things I Hate About You16.0 <p></p> <p></p>"},{"location":"examples/generated/UserGuide/mutate_transmute/#add-new-column","title":"Add new column","text":"<pre><code>@chain movies begin\n@filter(!ismissing(Budget))\n@mutate(Budget_Millions = Budget/1_000_000)\n@select(Title, Budget, Budget_Millions)\n@slice(1:5)\nend\n</code></pre> 5\u00d73 DataFrame RowTitleBudgetBudget_MillionsStringInt32?Float641'G' Men4500000.452'Manos' the Hands of Fate190000.0193'Til There Was You2300000023.04.com for Murder50000005.0510 Things I Hate About You1600000016.0 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/rename/","title":"@rename","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre>"},{"location":"examples/generated/UserGuide/rename/#rename-using-select","title":"Rename using @select()","text":"<p>You can use the @select() function to rename and select columns.</p> <pre><code>@chain movies begin\n@select(title = Title, Minutes = Length)\n@slice(1:5)\nend\n</code></pre> 5\u00d72 DataFrame RowtitleMinutesStringInt321$1212$1000 a Touchdown713$21 a Day Once a Month74$40,000705$50,000 Climax Show, The71 <p></p> <p></p>"},{"location":"examples/generated/UserGuide/rename/#rename-using-rename","title":"Rename using @rename()","text":"<pre><code>@chain movies begin\n@rename(title = Title, Minutes = Length)\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowtitleYearMinutesBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.4 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/select/","title":"@select","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre>"},{"location":"examples/generated/UserGuide/select/#select-the-first-5-columns-individually-by-name","title":"Select the first 5 columns individually by name","text":"<pre><code>@chain movies begin\n@select(Title, Year, Length, Budget, Rating)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.4"},{"location":"examples/generated/UserGuide/select/#select-the-first-5-columns-individually-by-number","title":"Select the first 5 columns individually by number","text":"<pre><code>@chain movies begin\n@select(1,2,3,4,5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.4"},{"location":"examples/generated/UserGuide/select/#select-the-first-5-columns-by-name-interval","title":"Select the first 5 columns by name (interval)","text":"<pre><code>@chain movies begin\n@select(Title:Rating)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.4"},{"location":"examples/generated/UserGuide/select/#select-the-first-5-columns-by-number-interval","title":"Select the first 5 columns by number (interval)","text":"<pre><code>@chain movies begin\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.4"},{"location":"examples/generated/UserGuide/select/#select-all-but-the-first-5-columns-by-name","title":"Select all but the first 5 columns by name","text":"<pre><code>@chain movies begin\n@select(-(Title:Rating))\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowVotesR1R2R3R4Int32Float64Float64Float64Float6413484.54.54.54.52200.014.54.524.5350.00.00.00.04614.50.00.00.051724.54.50.014.5"},{"location":"examples/generated/UserGuide/select/#select-all-but-the-first-5-columns-by-number","title":"Select all but the first 5 columns by number","text":"<pre><code>@chain movies begin\n@select(-(1:5))\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowVotesR1R2R3R4Int32Float64Float64Float64Float6413484.54.54.54.52200.014.54.524.5350.00.00.00.04614.50.00.00.051724.54.50.014.5"},{"location":"examples/generated/UserGuide/select/#mix-and-match-selection","title":"Mix and match selection","text":"<pre><code>@chain movies begin\n@select(1, Budget:Rating)\n@slice(1:5)\nend\n</code></pre> 5\u00d73 DataFrame RowTitleBudgetRatingStringInt32?Float641$missing6.42$1000 a Touchdownmissing6.03$21 a Day Once a Monthmissing8.24$40,000missing8.25$50,000 Climax Show, Themissing3.4 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/slice/","title":"@slice","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre>"},{"location":"examples/generated/UserGuide/slice/#slicing-using-a-range-of-numbers","title":"Slicing using a range of numbers","text":"<pre><code>@chain movies begin\n@slice(1:5)\n@select(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.4"},{"location":"examples/generated/UserGuide/slice/#separate-multiple-selections-with-commas","title":"Separate multiple selections with commas","text":"<pre><code>@chain movies begin\n@slice(1:5, 10)\n@select(1:5)\nend\n</code></pre> 6\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$1971121missing6.42$1000 a Touchdown193971missing6.03$21 a Day Once a Month19417missing8.24$40,000199670missing8.25$50,000 Climax Show, The197571missing3.46'49-'17191761missing6.0"},{"location":"examples/generated/UserGuide/slice/#inverted-selection-using-negative-numbers","title":"Inverted selection using negative numbers","text":"<p>This line selects all rows except the first 5 rows.</p> <pre><code>@chain movies begin\n@slice(-(1:5))\n@select(1:5)\n@slice(1:5)\nend\n</code></pre> 5\u00d75 DataFrame RowTitleYearLengthBudgetRatingStringInt32Int32Int32?Float641$pent200091missing4.32$windle200293missing5.33'15'200225missing6.74'38198797missing6.65'49-'17191761missing6.0 <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/summarize/","title":"@summarize or @summarise","text":"<pre><code>using Tidier\nusing DataFrames\nusing RDatasets\n\nmovies = dataset(\"ggplot2\", \"movies\");\n</code></pre> <p>Both @summarize and @summarise can be used.</p> <pre><code>@chain movies begin\n@filter(!ismissing(Budget))\n@summarize(nrow = length(Title))\nend\n</code></pre> 1\u00d71 DataFrame RownrowInt6415215 <p>This page was generated using Literate.jl.</p>"}]}